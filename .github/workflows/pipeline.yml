name: ninjaone-test

trigger: none

pr:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm-store
  npm_version: 9.5.0
  node_version: 20.x
  ui_app_url: ""

resources:
  pipelines:

stages:
  - stage: Test
    jobs:
      - job: RunPlaywrightTests
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "$(node_version)"
            displayName: "Install Node.js"

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.yaml'
              path: $(npm_config_cache)
            displayName: Cache npm

          - script: |
              cd test
              corepack enable
              corepack prepare npm@$(npm_version) --activate
              npm config set store-dir $(npm_config_cache)
            displayName: "Setup npm"

          - script: |
              cd test
              npm install --filter=tests --frozen-lockfile
            displayName: "Install test dependencies"

          - script: |
              cd test
              mkdir -p junit-test-results
              report_file_path="junit-test-results/e2e-junit-results.xml"
             
              PLAYWRIGHT_JUNIT_OUTPUT_FILE=$report_file_path npx playwright test --reporter=junit --timeout=120000 --trace on

              if [ -f "$report_file_path" ]; then
                chmod 755 "$report_file_path"
                echo "Report file has been created."
              else
                echo "JUnit report file does not exist."
              fi
            env:
              BASE_URL: $(ui_app_url)
              USERNAME: $(USERNAME)
              PASSWORD: $(PASSWORD)
              CI: "true"
            displayName: "Run Playwright Tests"
            continueOnError: true
          - task: PublishTestResults@2
            displayName: "Publish test results"
            inputs:
              searchFolder: "test/junit-test-results"
              testResultsFormat: "JUnit"
              testResultsFiles: "e2e-junit-results.xml"
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: "Run Playwright Tests"
            condition: succeededOrFailed()

          - task: PublishPipelineArtifact@1
            displayName: "Publish playwright test results"
            inputs:
              targetPath: test/playwright-report
              artifact: playwright-report
              publishLocation: "pipeline"
            condition: succeededOrFailed()

          - task: PublishPipelineArtifact@1
            displayName: "Publish Playwright JSON Results"
            inputs:
              targetPath: test/test-results
              artifact: "Playwright JSON Results"
              publishLocation: "pipeline"
            condition: succeededOrFailed()